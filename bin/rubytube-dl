#!/usr/bin/ruby
# CLI handler file
# @github.com/motebaya
# update: 2023.05.02 10:01:02 am

# load modules
require "optparse"
require "ostruct"
require "rubygems"

pathLib = nil
package_name = "rubytube-downloader"
begin
    gem_spec = Gem::Specification.find_by_name(
        package_name
    )
    if gem_spec then
        pathLib = Gem.loaded_specs[package_name].lib_dirs_glob
    end
rescue Gem::LoadError
    pathLib = "../lib"
end

if !pathLib.nil?
    Dir["#{pathLib}/*_class.rb"].each do |classes|
        require classes
    end
else
    abort("can't load the module!")
end

$banner = %{
        ┬─┐┬ ┬┌┐ ┬ ┬┌┬┐┬ ┬┌┐ ┌─┐ ┌┬┐┬  
        ├┬┘│ │├┴┐└┬┘ │ │ │├┴┐├┤───│││  
        ┴└─└─┘└─┘ ┴  ┴ └─┘└─┘└─┘ ─┴┘┴─┘
  ~ a ruby script for DL batch youtube video ~
      ~ © https://github.com/motebaya ~
}

# source: https://stackoverflow.com/a/17030234
def check_url(url)
    return url.match(
        %r"^(?:http(?:s)?:\/\/)?(?:www\.)?(?:m\.)?(?:youtu\.be\/|youtube\.com\/(?:(?:watch)?\?(?:.*&)?v(?:i)?=|(?:embed|v|vi|user|shorts)\/))([^\?&\"'>]+)"
    )
end

# path check
def check_path(path)
    return File.directory?(
        path.to_s
    )
end

def main()
    puts $banner
    puts
    ARGV << '-h' if ARGV.empty?
    options = OpenStruct.new
    begin
        OptionParser.new do | opts |
            opts.banner = "Usage: rubytube-dl [OPTIONS]"
            opts.on(
                "-u url","--url",
                String,
                "youtube video/shorts url"
            ) do | url |
                options[:url] = url
            end

            opts.on(
                "-o output", "--output",
                String,
                "output path download e.g: '/home/username/'"
            ) do | out |
                options[:output] = out
            end

            opts.on(
                "-s server", "--server",
                [:youtube, :savetube, :y2mate],
                String,
                "select server, server list: [ youtube, savetube, y2mate ]"
            ) do | serv |
                options[:server] = serv
            end

            opts.on(
                "-t type", "--type",
                [:audio, :video],
                String,
                "type of media: audio (.mp3) or video (.mp4)"
            ) do | type |
                options[:type] = type
            end

            opts.on(
                "-c", "--config",
                "using config from: 'config.yml'"
            ) do | config |
                options[:config] = config
            end

            opts.on(
                "-p playlist", "--playlist",
                String,
                "youtube playlist url",
            ) do | playlist | 
                options[:playlist] = playlist
            end

            opts.on_tail(
                "-h", "--help", 
                String,
                "show help and exit."
            ) do
                puts opts
                exit
            end
        end.parse!
    rescue OptionParser::InvalidOption => e
        abort("#{$banner}\n invalid options : #{e.message}")
    end

    @cli = true # CLI always true for this
    # config check
    if (options[:config])
        config = Helper.new.loadconfig
        if config.key?(options[:server])
            config = config[options[:server]]
            options[:output] = config['output']
            Helper.new.logger(
                options[:server],
                "config loaded from \033[33mrubytube.config.yml\033[0m"
            )
			Helper.new.logger(
                options[:server],
                "output dir: \033[33m#{options[:output]}\033[0m"
            )
            options[:default_quality] = config['quality']
            Helper.new.logger(
                options[:server],
                "default quality set: \033[33m#{options[:default_quality]}\033[0m"
            )
            if options[:server] == 'savetube'
                options[:type] = config['format']
                Helper.new.logger(
                    options[:server],
                    "default type set: \033[33m#{options[:type]}\033[0m"
                )
            end
        end
    end

    if ([options[:server], options[:output]].all?)
        if options[:url]

            if (options[:type].nil? && options[:server] == "savetube")
                abort(" required param -type for this server, use --help!")
            end
    
            if (check_url(options[:url]))
                if (check_path(options[:output]))
                    case options[:server]
                    when "youtube"
                        YoutubeCom.new(
                            options[:url],
                            options[:output],
                            true,
                            options[:default_quality]
                        ).extract()
                    when "savetube"
                        SaveTube.new(
                            options[:url],
                            options[:type],
                            options[:output],
                            true, # enable CLI
                            options[:default_quality]
                        ).extract()
                    when "y2mate"
                        Y2mate.new(
                            options[:url],
                            options[:output],
                            true,
                            options[:default_quality]
                        ).extract()
                    else
                        raise OptionParser::InvalidArgument,
                            "invalid server for -> #{options[:server]}"
                    end
                else
                    raise OptionParser::InvalidArgument,
                        "invalid output, no such directory -> #{options[:output]}"
                end
            else
                raise OptionParser::InvalidArgument,
                    "invalid url for -> #{options[:url]}"
            end
        elsif options[:playlist]
            # just throw all arg lmao
            Playlist.new(
                options[:playlist],
                options[:output],
                options[:server],
                options[:type],
                options[:default_quality]
            ).extract
        end
    else
        abort("Usage: rubytube-dl --help")
    end

end

main()
